import { DialogService, LoadingService, RestService } from '@gollala/ng-common';
import { BehaviorSubject } from 'rxjs';
import { CartInfo, CartItem, SelectedExcelsInfo, SelectedProductsInfo } from "../interface/cart.model";
import { Observable } from "rxjs";
import * as i0 from "@angular/core";
export declare class CartService {
    private restService;
    private dialogService;
    private loadingService;
    cartInfo: CartInfo;
    private _step;
    private _customCartId;
    private _cartId;
    private _customerId;
    private _memoExcelsInfo;
    private _memoProductsInfo;
    private _selectedProductsInfo;
    private _selectedExcelsInfo;
    cartInfo$: BehaviorSubject<CartInfo>;
    completedCartItemsOrder: any;
    completedOrderInCart: any;
    constructor(restService: RestService, dialogService: DialogService, loadingService: LoadingService);
    get step(): "error" | "pending" | "cart" | "empty" | "payment" | "complete-store-order" | "complete-one-stop";
    get memoExcelsInfo(): any;
    get memoProductsInfo(): any;
    get selectedProductsInfo(): SelectedProductsInfo;
    get selectedExcelsInfo(): SelectedExcelsInfo;
    addCart(items: CartItem[]): Observable<{
        _id: string;
        items: CartItem[];
    }>;
    subtractCart(items: CartItem[]): Observable<{
        _id: string;
        items: CartItem[];
    }>;
    setStep(value: 'pending' | 'cart' | 'empty' | 'error' | 'payment' | 'complete-store-order' | 'complete-one-stop'): void;
    resetSelectedProductsInfo(): void;
    resetSelectedExcelInfo(): void;
    getAuthCart(): Observable<any>;
    getAuthExcelCart(): Observable<any>;
    requestProductList(ids: string[]): Observable<any>;
    putExcelCart(items: any[]): Observable<any>;
    getCartInfo(): void;
    deleteProductInCart(): void;
    deleteProductOption(hasOneOption: boolean, cartItemId: string): void;
    deleteExcelCart(): void;
    orderToStore(phone: string): void;
    private createCustomCartOrder;
    private createCustomOrderUsingCartItems;
    addAddress(body: any): Observable<any>;
    updateAddress(id: string, body: any): Observable<any>;
    deleteAddress(id: string): Observable<any>;
    cartCheckout(body: any): Observable<any>;
    setPrimaryAddress(id: string): Observable<any>;
    private cleanProductCart;
    static ɵfac: i0.ɵɵFactoryDeclaration<CartService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CartService>;
}
