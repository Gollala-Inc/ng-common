import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { BehaviorSubject, catchError, delay, filter, map, mergeMap, Observable, throwError, timer } from 'rxjs';
import { ajax } from 'rxjs/ajax';
import * as i0 from "@angular/core";
import * as i1 from "../service/intersection-observer.service";
const IMAGE_LOADING_PATH = 'assets/images/loading-message.png';
const IMAGE_NOT_FOUND_PATH = 'assets/images/not-found.png';
export class LazyImageDirective {
    constructor(el, ioService) {
        this.el = el;
        this.ioService = ioService;
        this.retryLimit = 1;
        this.beforeLoad = new EventEmitter();
        this.afterLoad = new EventEmitter();
        this.onError = new EventEmitter();
        this.load$ = new BehaviorSubject(null);
        this.retry$ = new BehaviorSubject(-1);
        this.status = 'INIT';
        this.subscriptions = [];
    }
    ngOnInit() {
        this.setup();
        this.initSubscriptions();
        this.attachIntersectionObserver();
        this.beforeLoaded();
    }
    ngOnChanges(changes) {
        if (!changes['lazySrc'].firstChange) {
            // 만약 재시도 중이었다면 취소시킴
            const currentRetryCount = this.retry$.value;
            if (currentRetryCount !== -1) {
                this.retry$.next(-1);
            }
            this.beforeLoaded();
            const src = changes['lazySrc'].currentValue;
            this.loadImage(src)
                .subscribe((data) => { this.load$.next({ src: data, event: null }); }, () => { this.retry$.next(this.retryLimit - 1); });
        }
    }
    ngOnDestroy() {
        this.unsubscribeAll();
    }
    setup() {
        this.ne = this.el.nativeElement;
    }
    initSubscriptions() {
        const loadSub = this.load$
            .pipe(filter(Boolean))
            .subscribe((loadEvent) => {
            const { event, src } = loadEvent;
            if (this.ne) {
                if (this.ne.tagName === 'IMG') {
                    const imgTag = this.ne;
                    imgTag.src = src;
                }
                else {
                    this.populateBackgroundStyles(this.ne, src);
                }
                this.afterLoad.emit({
                    el: this.el,
                    src,
                    intersectionObserver: this.observer,
                    event,
                });
            }
        });
        this.subscriptions.push(loadSub);
        const retrySub = this.retry$
            .pipe(filter(x => x !== -1), filter(x => this.status !== 'LOAD'), delay(3000))
            .subscribe(retryCount => {
            if (retryCount <= 0) {
                this.error();
                return;
            }
            if (this.lazySrc) {
                this.loadImage(this.lazySrc)
                    .subscribe(data => { this.load$.next({ src: data, event: null }); }, err => { this.retry$.next(retryCount - 1); });
            }
        });
        this.subscriptions.push(retrySub);
    }
    unsubscribeAll() {
        this.subscriptions.forEach(s => {
            s.unsubscribe();
        });
    }
    /**
     * try retrieve image from cache. if the image doesn't exist, try request.
     * @param url
     */
    loadImage(url) {
        return this.loadImageFromUrl(url);
    }
    loadImageFromUrl(url) {
        return ajax({
            url,
            crossDomain: true,
            responseType: 'arraybuffer',
        }).pipe(map((ajaxResponse) => {
            if (ajaxResponse.status >= 400) {
                throw new Error('Cannot image url');
            }
            return ajaxResponse.response;
        }), mergeMap((bufferArray) => {
            return Observable.create((observer) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    observer.next(reader.result);
                    observer.complete();
                };
                reader.onerror = (e) => {
                    observer.error(e);
                };
                reader.readAsDataURL(new Blob([bufferArray]));
            });
        }), catchError(e => throwError(e)));
    }
    attachIntersectionObserver() {
        /**
         * Lazy Loading
         */
        if (this.ne) {
            const { ixIn, ixOut } = this.ioService.observe(this.ne);
            let timerSub;
            const inSub = ixIn.subscribe((value) => {
                const { entry, observer } = value;
                if (timerSub && timerSub.closed) {
                    timerSub.unsubscribe();
                }
                this.status = 'LOADING';
                timerSub = timer(200)
                    .pipe(mergeMap(_ => this.loadImage(this.lazySrc || '')))
                    .subscribe(data => {
                    this.load$.next({ src: data, event: null });
                    observer.unobserve(entry.target);
                }, err => {
                    this.retry$.next(this.retryLimit);
                });
            });
            const outSub = ixOut.subscribe((value) => {
                if (timerSub) {
                    this.status = 'INIT';
                    timerSub.unsubscribe();
                }
            });
            this.subscriptions.push(inSub, outSub);
        }
    }
    beforeLoaded() {
        if (this.ne) {
            if (this.ne.tagName === 'IMG') {
                const imgTag = this.ne;
                imgTag.src = IMAGE_LOADING_PATH;
            }
            else {
                this.populateBackgroundStyles(this.ne, IMAGE_LOADING_PATH);
            }
            this.beforeLoad.emit({
                el: this.el,
                src: IMAGE_LOADING_PATH,
                intersectionObserver: this.observer
            });
        }
    }
    error() {
        if (this.ne) {
            if (this.ne.tagName === 'IMG') {
                const imgTag = this.el.nativeElement;
                imgTag.src = IMAGE_NOT_FOUND_PATH;
            }
            else {
                this.populateBackgroundStyles(this.ne, IMAGE_NOT_FOUND_PATH);
            }
            this.ioService.unobserve(this.ne);
            this.onError.emit({
                el: this.el,
                src: IMAGE_NOT_FOUND_PATH,
                intersectionObserver: this.observer,
                event,
            });
        }
    }
    populateBackgroundStyles(placeholder, imagePath) {
        placeholder.style.backgroundImage = `url(${imagePath})`;
        placeholder.style.backgroundPosition = 'center';
        placeholder.style.backgroundRepeat = 'no-repeat';
        placeholder.style.backgroundSize = 'contain';
    }
}
LazyImageDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LazyImageDirective, deps: [{ token: i0.ElementRef }, { token: i1.IntersectionObserverService }], target: i0.ɵɵFactoryTarget.Directive });
LazyImageDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: LazyImageDirective, selector: "[lazyImage]", inputs: { lazySrc: ["lazyImage", "lazySrc"], ioOptions: "ioOptions", retryLimit: "retryLimit" }, outputs: { beforeLoad: "beforeLoad", afterLoad: "afterLoad", onError: "onError" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LazyImageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[lazyImage]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.IntersectionObserverService }]; }, propDecorators: { lazySrc: [{
                type: Input,
                args: ['lazyImage']
            }], ioOptions: [{
                type: Input
            }], retryLimit: [{
                type: Input
            }], beforeLoad: [{
                type: Output
            }], afterLoad: [{
                type: Output
            }], onError: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,