import { Injectable } from '@angular/core';
import { BehaviorSubject, of, throwError } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as CryptoJS from 'crypto-js';
import * as i0 from "@angular/core";
import * as i1 from "@gollala/ng-common";
const SIGNIN_ENDPOINT = 'https://commerce-api.gollala.org/customer/auth/login';
const SIGNEDIN_ENDPOINT = 'https://commerce-api.gollala.org/customer/auth/info';
const SEND_EMAIL = 'https://gollala-email-zaj3pqrsqq-du.a.run.app/api/email/send/verification/';
const SIGNOUT_ENDPOINT = '/api/security/v3/signout';
const SIGNUP_ENDPOINT = 'https://commerce-api.gollala.org/customer/auth/register';
const CHANGE_USER_ENDPOINT = '/api/security/v3/changeUser';
const GET_SERVICE_USER_ENDPOINT = '/api/account/serviceUser/get/';
const cypher = {
    initVector: 'wiseSecretVector',
    secretKey: 'wise$billing$key'
};
export class SecurityService {
    constructor(restService) {
        this.restService = restService;
        this._signedIn = false;
        this.signedIn$ = new BehaviorSubject(this._signedIn);
    }
    get signedIn() {
        return this._signedIn;
    }
    signUpReqeust(body) {
        return this.restService.POST(SIGNUP_ENDPOINT, {
            body,
            handleError: true,
            responseType: 'text'
        });
    }
    sendEmail(body) {
        return this.restService.POST(SEND_EMAIL, {
            body,
            handleError: true
        });
    }
    getUserInfo() {
        return this.restService.GET(SIGNEDIN_ENDPOINT, {
            handleError: true
        });
    }
    isExpiredToken(token) {
        const { date } = JSON.parse(token);
        const current = +new Date();
        const diff = current - date;
        return diff > 604800000 ? true : false;
    }
    signInRequest(userId, password) {
        return this.restService.POST(SIGNIN_ENDPOINT, {
            body: {
                userId,
                password
            },
            handleError: true,
            responseType: 'text'
        }).pipe(catchError((e) => {
            console.log(e);
            return throwError(e);
        }), mergeMap(token => {
            const gollalaToken = {
                token,
                date: +new Date()
            };
            localStorage.setItem('gollala_token', JSON.stringify(gollalaToken));
            return this.signedInRequest();
        }));
    }
    signedInRequest() {
        return this.restService.GET(SIGNEDIN_ENDPOINT, {
            handleError: true
        }).pipe(catchError(e => {
            this._signedIn = false;
            this.signedIn$.next(false);
            return throwError(e);
        }), map((signedIn) => {
            const gollalaToken = localStorage.getItem('gollala_token');
            if (!gollalaToken || (gollalaToken && this.isExpiredToken(gollalaToken))) {
                this._signedIn = false;
                return false;
            }
            this._signedIn = signedIn;
            this.signedIn$.next({ ...signedIn });
            return true;
        }));
    }
    signInWithGoogleRequest(idToken, provider) {
        return this.restService.POST(`https://commerce-api.gollala.org/customer/auth/social`, {
            params: {
                idToken,
                provider,
            },
            handleError: true,
            responseType: 'text'
        }).pipe(catchError((e) => {
            console.log(e);
            return throwError(e);
        }), mergeMap(token => {
            const gollalaToken = {
                token,
                date: +new Date()
            };
            localStorage.setItem('gollala_token', JSON.stringify(gollalaToken));
            return this.signedInRequest();
        }));
    }
    signout() {
        localStorage.removeItem('gollala_token');
        this._signedIn = false;
        this.signedIn$.next(null);
    }
    /**
     * This method will be deprecated after menus and paths are properly set.
     */
    signOutRequest() {
        return this.restService.GET(SIGNOUT_ENDPOINT, {
            responseType: 'text',
            handleError: true,
        }).pipe(catchError(e => {
            return throwError(e);
        }), mergeMap(result => {
            this._signedIn = false;
            return of(true);
        }));
    }
    changeUser(body) {
        return this.restService.POST(CHANGE_USER_ENDPOINT, {
            body,
            handleError: true,
        });
    }
    fileUploadToPath(file) {
        return this.restService.POST('/api/cdn/public/uploadFile', {
            multipart: true,
            params: {
                file: file,
            },
            responseType: 'text'
        });
    }
    getServiceUser() {
        const serviceUserId = this.signedIn.activeUserId;
        return this.restService.GET(`${GET_SERVICE_USER_ENDPOINT}/${serviceUserId}?b=true`);
    }
    encrypt(text) {
        // 이미 암호화 코드 상태이면 반환
        if (Number.isNaN(+text)) {
            return text;
        }
        const iv = CryptoJS.enc.Utf8.parse(cypher.initVector);
        const key = CryptoJS.enc.Utf8.parse(cypher.secretKey);
        const encrypted = CryptoJS.AES.encrypt(text, key, { iv: iv, padding: CryptoJS.pad.Pkcs7 }).toString();
        return encodeURIComponent(encrypted);
    }
    decrypt(text) {
        let decodeText = text;
        let decodeURI = decodeURIComponent(decodeText);
        while (decodeURI != decodeText) {
            decodeText = decodeURI;
            decodeURI = decodeURIComponent(decodeText);
        }
        const iv = CryptoJS.enc.Utf8.parse(cypher.initVector);
        const key = CryptoJS.enc.Utf8.parse(cypher.secretKey);
        const decrypted = CryptoJS.AES.decrypt(decodeURI, key, { iv: iv, padding: CryptoJS.pad.Pkcs7 });
        return decrypted.toString(CryptoJS.enc.Utf8);
    }
}
SecurityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SecurityService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
SecurityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SecurityService, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SecurityService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'any'
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });
//# sourceMappingURL=data:application/json;base64,