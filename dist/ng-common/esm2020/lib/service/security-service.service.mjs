import { Injectable } from '@angular/core';
import { BehaviorSubject, of, throwError } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as CryptoJS from 'crypto-js';
import * as i0 from "@angular/core";
import * as i1 from "@gollala/ng-common";
const SIGNIN_ENDPOINT = 'https://commerce-api.gollala.org/customer/auth/login';
const SIGNEDIN_ENDPOINT = 'https://commerce-api.gollala.org/customer/auth/info';
const SEND_EMAIL = 'https://gollala-email-zaj3pqrsqq-du.a.run.app/api/email/send/verification/';
const SIGNOUT_ENDPOINT = '/api/security/v3/signout';
const SIGNUP_ENDPOINT = 'https://commerce-api.gollala.org/customer/auth/register';
const CHANGE_USER_ENDPOINT = '/api/security/v3/changeUser';
const GET_SERVICE_USER_ENDPOINT = '/api/account/serviceUser/get/';
const cypher = {
    initVector: 'wiseSecretVector',
    secretKey: 'wise$billing$key'
};
export class SecurityService {
    constructor(restService) {
        this.restService = restService;
        this._signedIn = false;
        this.signedIn$ = new BehaviorSubject(this._signedIn);
    }
    get signedIn() {
        return this._signedIn;
    }
    signUpReqeust(body) {
        return this.restService.POST(SIGNUP_ENDPOINT, {
            body,
            handleError: true,
            responseType: 'text'
        });
    }
    sendEmail(body) {
        return this.restService.POST(SEND_EMAIL, {
            body,
            handleError: true
        });
    }
    getUserInfo() {
        return this.restService.GET(SIGNEDIN_ENDPOINT, {
            handleError: true
        });
    }
    isExpiredToken(token) {
        const { date } = JSON.parse(token);
        const current = +new Date();
        const diff = current - date;
        return diff > 604800000 ? true : false;
    }
    signInRequest(userId, password) {
        return this.restService.POST(SIGNIN_ENDPOINT, {
            body: {
                userId,
                password
            },
            handleError: true,
            responseType: 'text'
        }).pipe(catchError((e) => {
            console.log(e);
            return throwError(e);
        }), mergeMap(token => {
            const gollalaToken = {
                token,
                date: +new Date()
            };
            localStorage.setItem('gollala_token', JSON.stringify(gollalaToken));
            return this.signedInRequest();
        }));
    }
    signedInRequest() {
        return this.restService.GET(SIGNEDIN_ENDPOINT, {
            handleError: true
        }).pipe(catchError(e => {
            this._signedIn = false;
            this.signedIn$.next(false);
            return throwError(e);
        }), map((signedIn) => {
            const gollalaToken = localStorage.getItem('gollala_token');
            if (!gollalaToken || (gollalaToken && this.isExpiredToken(gollalaToken))) {
                this._signedIn = false;
                return false;
            }
            this._signedIn = signedIn;
            this.signedIn$.next({ ...signedIn });
            return true;
        }));
    }
    signInWithGoogleRequest(idToken, provider) {
        return this.restService.POST(`https://commerce-api.gollala.org/customer/auth/social`, {
            params: {
                idToken,
                provider,
            },
            handleError: true,
            responseType: 'text'
        }).pipe(catchError((e) => {
            console.log(e);
            return throwError(e);
        }), mergeMap(token => {
            const gollalaToken = {
                token,
                date: +new Date()
            };
            localStorage.setItem('gollala_token', JSON.stringify(gollalaToken));
            return this.signedInRequest();
        }));
    }
    signout() {
        localStorage.removeItem('gollala_token');
        this._signedIn = false;
        this.signedIn$.next(null);
    }
    /**
     * This method will be deprecated after menus and paths are properly set.
     */
    signOutRequest() {
        return this.restService.GET(SIGNOUT_ENDPOINT, {
            responseType: 'text',
            handleError: true,
        }).pipe(catchError(e => {
            return throwError(e);
        }), mergeMap(result => {
            this._signedIn = false;
            return of(true);
        }));
    }
    changeUser(body) {
        return this.restService.POST(CHANGE_USER_ENDPOINT, {
            body,
            handleError: true,
        });
    }
    fileUploadToPath(file) {
        return this.restService.POST('/api/cdn/public/uploadFile', {
            multipart: true,
            params: {
                file: file,
            },
            responseType: 'text'
        });
    }
    getServiceUser() {
        const serviceUserId = this.signedIn.activeUserId;
        return this.restService.GET(`${GET_SERVICE_USER_ENDPOINT}/${serviceUserId}?b=true`);
    }
    encrypt(text) {
        // 이미 암호화 코드 상태이면 반환
        if (Number.isNaN(+text)) {
            return text;
        }
        const iv = CryptoJS.enc.Utf8.parse(cypher.initVector);
        const key = CryptoJS.enc.Utf8.parse(cypher.secretKey);
        const encrypted = CryptoJS.AES.encrypt(text, key, { iv: iv, padding: CryptoJS.pad.Pkcs7 }).toString();
        return encodeURIComponent(encrypted);
    }
    decrypt(text) {
        let decodeText = text;
        let decodeURI = decodeURIComponent(decodeText);
        while (decodeURI != decodeText) {
            decodeText = decodeURI;
            decodeURI = decodeURIComponent(decodeText);
        }
        const iv = CryptoJS.enc.Utf8.parse(cypher.initVector);
        const key = CryptoJS.enc.Utf8.parse(cypher.secretKey);
        const decrypted = CryptoJS.AES.decrypt(decodeURI, key, { iv: iv, padding: CryptoJS.pad.Pkcs7 });
        return decrypted.toString(CryptoJS.enc.Utf8);
    }
}
SecurityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SecurityService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
SecurityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SecurityService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SecurityService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHktc2VydmljZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY29tbW9uL3NyYy9saWIvc2VydmljZS9zZWN1cml0eS1zZXJ2aWNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsZUFBZSxFQUFtQixFQUFFLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBRXBFLE9BQU8sS0FBSyxRQUFRLE1BQU0sV0FBVyxDQUFDOzs7QUFFdEMsTUFBTSxlQUFlLEdBQUcsc0RBQXNELENBQUM7QUFDL0UsTUFBTSxpQkFBaUIsR0FBRyxxREFBcUQsQ0FBQztBQUNoRixNQUFNLFVBQVUsR0FBRyw0RUFBNEUsQ0FBQztBQUNoRyxNQUFNLGdCQUFnQixHQUFHLDBCQUEwQixDQUFDO0FBQ3BELE1BQU0sZUFBZSxHQUFHLHlEQUF5RCxDQUFDO0FBQ2xGLE1BQU0sb0JBQW9CLEdBQUcsNkJBQTZCLENBQUM7QUFDM0QsTUFBTSx5QkFBeUIsR0FBRywrQkFBK0IsQ0FBQztBQU9sRSxNQUFNLE1BQU0sR0FBVztJQUNyQixVQUFVLEVBQUUsa0JBQWtCO0lBQzlCLFNBQVMsRUFBRSxrQkFBa0I7Q0FDOUIsQ0FBQztBQUtGLE1BQU0sT0FBTyxlQUFlO0lBTTFCLFlBQ1UsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFMM0IsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUV6QixjQUFTLEdBQUcsSUFBSSxlQUFlLENBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBSWxELENBQUM7SUFFSixJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENB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QUFDLENBQUM7SUFDL0MsQ0FBQzs7NEdBM0xVLGVBQWU7Z0hBQWYsZUFBZSxjQUZkLE1BQU07MkZBRVAsZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIGlpZiwgT2JzZXJ2YWJsZSwgb2YsIHRocm93RXJyb3J9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjYXRjaEVycm9yLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7UmVzdFNlcnZpY2V9IGZyb20gJ0Bnb2xsYWxhL25nLWNvbW1vbic7XG5pbXBvcnQgKiBhcyBDcnlwdG9KUyBmcm9tICdjcnlwdG8tanMnO1xuXG5jb25zdCBTSUdOSU5fRU5EUE9JTlQgPSAnaHR0cHM6Ly9jb21tZXJjZS1hcGkuZ29sbGFsYS5vcmcvY3VzdG9tZXIvYXV0aC9sb2dpbic7XG5jb25zdCBTSUdORURJTl9FTkRQT0lOVCA9ICdodHRwczovL2NvbW1lcmNlLWFwaS5nb2xsYWxhLm9yZy9jdXN0b21lci9hdXRoL2luZm8nO1xuY29uc3QgU0VORF9FTUFJTCA9ICdodHRwczovL2dvbGxhbGEtZW1haWwtemFqM3BxcnNxcS1kdS5hLnJ1bi5hcHAvYXBpL2VtYWlsL3NlbmQvdmVyaWZpY2F0aW9uLyc7XG5jb25zdCBTSUdOT1VUX0VORFBPSU5UID0gJy9hcGkvc2VjdXJpdHkvdjMvc2lnbm91dCc7XG5jb25zdCBTSUdOVVBfRU5EUE9JTlQgPSAnaHR0cHM6Ly9jb21tZXJjZS1hcGkuZ29sbGFsYS5vcmcvY3VzdG9tZXIvYXV0aC9yZWdpc3Rlcic7XG5jb25zdCBDSEFOR0VfVVNFUl9FTkRQT0lOVCA9ICcvYXBpL3NlY3VyaXR5L3YzL2NoYW5nZVVzZXInO1xuY29uc3QgR0VUX1NFUlZJQ0VfVVNFUl9FTkRQT0lOVCA9ICcvYXBpL2FjY291bnQvc2VydmljZVVzZXIvZ2V0Lyc7XG5cbmludGVyZmFjZSBDeXBoZXIge1xuICAgIGluaXRWZWN0b3I6IHN0cmluZztcbiAgICBzZWNyZXRLZXk6IHN0cmluZztcbn1cblxuY29uc3QgY3lwaGVyOiBDeXBoZXIgPSB7XG4gIGluaXRWZWN0b3I6ICd3aXNlU2VjcmV0VmVjdG9yJyxcbiAgc2VjcmV0S2V5OiAnd2lzZSRiaWxsaW5nJGtleSdcbn07XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNlY3VyaXR5U2VydmljZSB7XG5cbiAgcHVibGljIF9zaWduZWRJbiA9IGZhbHNlO1xuXG4gIHNpZ25lZEluJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55Pih0aGlzLl9zaWduZWRJbik7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZXN0U2VydmljZTogUmVzdFNlcnZpY2UsXG4gICkge31cblxuICBnZXQgc2lnbmVkSW4oKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fc2lnbmVkSW47XG4gIH1cblxuICBwdWJsaWMgc2lnblVwUmVxZXVzdChib2R5OiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0U2VydmljZS5QT1NUKFNJR05VUF9FTkRQT0lOVCwge1xuICAgICAgYm9keSxcbiAgICAgIGhhbmRsZUVycm9yOiB0cnVlLFxuICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCdcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kRW1haWwoYm9keTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UuUE9TVChTRU5EX0VNQUlMLCB7XG4gICAgICBib2R5LFxuICAgICAgaGFuZGxlRXJyb3I6IHRydWVcbiAgICB9KTtcbiAgfVxuXG5cbiAgcHVibGljIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLkdFVChTSUdORURJTl9FTkRQT0lOVCwge1xuICAgICAgaGFuZGxlRXJyb3I6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBpc0V4cGlyZWRUb2tlbih0b2tlbjogc3RyaW5nKSB7XG4gICAgY29uc3Qge2RhdGV9ID0gSlNPTi5wYXJzZSh0b2tlbilcbiAgICBjb25zdCBjdXJyZW50ID0gK25ldyBEYXRlKCk7XG4gICAgY29uc3QgZGlmZiA9IGN1cnJlbnQgLSBkYXRlO1xuXG4gICAgcmV0dXJuIGRpZmYgPiA2MDQ4MDAwMDAgPyB0cnVlIDogZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc2lnbkluUmVxdWVzdCh1c2VySWQ6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLlBPU1QoU0lHTklOX0VORFBPSU5ULCB7XG4gICAgICBib2R5OiB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgcGFzc3dvcmRcbiAgICAgIH0sXG4gICAgICBoYW5kbGVFcnJvcjogdHJ1ZSxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ3RleHQnXG4gICAgfSkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKGUpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGUpO1xuICAgICAgfSksXG4gICAgICBtZXJnZU1hcCh0b2tlbiA9PiB7XG4gICAgICAgIGNvbnN0IGdvbGxhbGFUb2tlbiA9IHtcbiAgICAgICAgICB0b2tlbixcbiAgICAgICAgICBkYXRlOiArbmV3IERhdGUoKVxuICAgICAgICB9O1xuXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdnb2xsYWxhX3Rva2VuJywgSlNPTi5zdHJpbmdpZnkoZ29sbGFsYVRva2VuKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25lZEluUmVxdWVzdCgpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHNpZ25lZEluUmVxdWVzdCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5yZXN0U2VydmljZS5HRVQoU0lHTkVESU5fRU5EUE9JTlQsIHtcbiAgICAgIGhhbmRsZUVycm9yOiB0cnVlXG4gICAgfSkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoZSA9PiB7XG4gICAgICAgIHRoaXMuX3NpZ25lZEluID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2lnbmVkSW4kLm5leHQoZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlKTtcbiAgICAgIH0pLFxuICAgICAgbWFwKChzaWduZWRJbik6IGFueSA9PiB7XG4gICAgICAgIGNvbnN0IGdvbGxhbGFUb2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdnb2xsYWxhX3Rva2VuJyk7XG4gICAgICAgIGlmICghZ29sbGFsYVRva2VuIHx8IChnb2xsYWxhVG9rZW4gJiYgdGhpcy5pc0V4cGlyZWRUb2tlbihnb2xsYWxhVG9rZW4pKSkge1xuICAgICAgICAgIHRoaXMuX3NpZ25lZEluID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NpZ25lZEluID0gc2lnbmVkSW47XG4gICAgICAgIHRoaXMuc2lnbmVkSW4kLm5leHQoey4uLnNpZ25lZElufSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHNpZ25JbldpdGhHb29nbGVSZXF1ZXN0KGlkVG9rZW46IHN0cmluZywgcHJvdmlkZXI6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLlBPU1QoYGh0dHBzOi8vY29tbWVyY2UtYXBpLmdvbGxhbGEub3JnL2N1c3RvbWVyL2F1dGgvc29jaWFsYCwge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGlkVG9rZW4sXG4gICAgICAgIHByb3ZpZGVyLFxuICAgICAgfSxcbiAgICAgIGhhbmRsZUVycm9yOiB0cnVlLFxuICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCdcbiAgICB9KS5waXBlKFxuICAgICAgY2F0Y2hFcnJvcigoZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZSk7XG4gICAgICB9KSxcbiAgICAgIG1lcmdlTWFwKHRva2VuID0+IHtcbiAgICAgICAgY29uc3QgZ29sbGFsYVRva2VuID0ge1xuICAgICAgICAgIHRva2VuLFxuICAgICAgICAgIGRhdGU6ICtuZXcgRGF0ZSgpXG4gICAgICAgIH07XG5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2dvbGxhbGFfdG9rZW4nLCBKU09OLnN0cmluZ2lmeShnb2xsYWxhVG9rZW4pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmVkSW5SZXF1ZXN0KCk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc2lnbm91dCgpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnZ29sbGFsYV90b2tlbicpO1xuICAgIHRoaXMuX3NpZ25lZEluID0gZmFsc2U7XG4gICAgdGhpcy5zaWduZWRJbiQubmV4dChudWxsKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBhZnRlciBtZW51cyBhbmQgcGF0aHMgYXJlIHByb3Blcmx5IHNldC5cbiAgICovXG5cbiAgcHVibGljIHNpZ25PdXRSZXF1ZXN0KCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLkdFVChTSUdOT1VUX0VORFBPSU5ULCB7XG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcbiAgICAgIGhhbmRsZUVycm9yOiB0cnVlLFxuICAgIH0pLnBpcGUoXG4gICAgICBjYXRjaEVycm9yKGUgPT4ge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlKTtcbiAgICAgIH0pLFxuICAgICAgbWVyZ2VNYXAocmVzdWx0ID0+IHtcbiAgICAgICAgdGhpcy5fc2lnbmVkSW4gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGNoYW5nZVVzZXIoYm9keTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UuUE9TVChDSEFOR0VfVVNFUl9FTkRQT0lOVCwge1xuICAgICAgYm9keSxcbiAgICAgIGhhbmRsZUVycm9yOiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGZpbGVVcGxvYWRUb1BhdGgoZmlsZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdFNlcnZpY2UuUE9TVCgnL2FwaS9jZG4vcHVibGljL3VwbG9hZEZpbGUnLCB7XG4gICAgICBtdWx0aXBhcnQ6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgZmlsZTogZmlsZSxcbiAgICAgIH0sXG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0J1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0U2VydmljZVVzZXIoKSB7XG4gICAgY29uc3Qgc2VydmljZVVzZXJJZCA9IHRoaXMuc2lnbmVkSW4uYWN0aXZlVXNlcklkO1xuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLkdFVChgJHtHRVRfU0VSVklDRV9VU0VSX0VORFBPSU5UfS8ke3NlcnZpY2VVc2VySWR9P2I9dHJ1ZWApO1xuICB9XG5cbiAgZW5jcnlwdCh0ZXh0OiBzdHJpbmcpIHtcbiAgICAvLyDsnbTrr7gg7JWU7Zi47ZmUIOy9lOuTnCDsg4Htg5zsnbTrqbQg67CY7ZmYXG4gICAgaWYgKE51bWJlci5pc05hTigrdGV4dCkpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBjb25zdCBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGN5cGhlci5pbml0VmVjdG9yKTtcbiAgICBjb25zdCBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShjeXBoZXIuc2VjcmV0S2V5KTtcbiAgICBjb25zdCBlbmNyeXB0ZWQgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdCh0ZXh0LCBrZXksIHtpdjogaXYsIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzN30pLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlbmNyeXB0ZWQpO1xuICB9XG5cbiAgZGVjcnlwdCh0ZXh0OiBzdHJpbmcpIHtcbiAgICBsZXQgZGVjb2RlVGV4dCA9IHRleHQ7XG4gICAgbGV0IGRlY29kZVVSSSA9IGRlY29kZVVSSUNvbXBvbmVudChkZWNvZGVUZXh0KTtcbiAgICB3aGlsZSAoZGVjb2RlVVJJICE9IGRlY29kZVRleHQpIHtcbiAgICAgIGRlY29kZVRleHQgPSBkZWNvZGVVUkk7XG4gICAgICBkZWNvZGVVUkkgPSBkZWNvZGVVUklDb21wb25lbnQoZGVjb2RlVGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGl2ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoY3lwaGVyLmluaXRWZWN0b3IpO1xuICAgIGNvbnN0IGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGN5cGhlci5zZWNyZXRLZXkpO1xuICAgIGNvbnN0IGRlY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KGRlY29kZVVSSSwga2V5LCB7aXY6IGl2LCBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczd9KTtcblxuICAgIHJldHVybiBkZWNyeXB0ZWQudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xuICB9XG59XG4iXX0=